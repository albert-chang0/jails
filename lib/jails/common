#!/usr/bin/bash
EXIT_FAILURE_MISSING_DEPENDENCIES=1
EXIT_FAILURE_PERMISSION=2
EXIT_FAILURE_MISSING_PKG=3
EXIT_FAILURE_PKG_NOT_FILE=4
EXIT_FAILURE_PRE_SSH=5
EXIT_FAILURE_SSH_ACCESS=6
EXIT_FAILURE_CD=7
EXIT_FAILURE_BASE_IMG_NOT_FOUND=8

qemu_base_dir="/opt/qemu"
base_img="debian.img"
kiosk_img="kiosk.debian.cow"
overlay_run_dir="${XDG_RUNTIME_DIR}"

check_deps() {
  declare -a missing
  for i in "$@"; do
    command -v "$i" > /dev/null || missing+=("$i")
  done
  if [ "${#missing[@]}" -gt 0 ]; then
    printf 'missing commands: %s' "${missing[0]}" >&2
    for i in $(seq 1 ${#missing[@]}); do
      printf ', %s' "$i" >&2
    done
    printf '\n' >&2
    exit $EXIT_FAILURE_MISSING_DEPENDENCIES
  fi
}

check_perms() {
  if [ $UID -ne 0 ]; then
    printf "root privileges required\n" >&2
    exit $EXIT_FAILURE_PERMISSION
  fi
}

check_ssh_agent() {
  if [ -z "$SSH_AUTH_SOCK" ]; then
    printf "ssh agent does not appear to be running\n"
    exit $EXIT_FAILURE_PRE_SSH
  fi
}

find_open_port() {
  local port="$1"

  while lsof -Pnti tcp:${port} -s tcp:listen &> /dev/null && lsof -Pnti tcp:$((port + 1)) -s tcp:listen; do
    port=$((port + 1))
  done
  printf "%s" "$port"
}

wait_for_ssh_or_die() {
  local port="$1"
  local can_ssh=0

  printf "waiting for ssh to be available."
  while ! lsof -Pnti tcp:${port} -s tcp:listen &> /dev/null; do printf .; sleep 0.1; done
  for _ in {0..299}; do
    # bug in setup: -T hangs instead of returning immediately
    if ssh -qp $port -o ConnectTimeout=1 -o StrictHostKeyChecking=no localhost : &> /dev/null; then
      can_ssh=1
      break
    fi
    printf .
    sleep 0.1
  done
  printf "\n"
  if [ "$can_ssh" -ne 1 ]; then
    printf "failed to ssh to debian image\n" >&2
    exit $EXIT_FAILURE_SSH_ACCESS
  fi
}

cd_or_die() {
  cd "$1" || { printf "failed to change dir to %s\n" "$1" >&2; exit $EXIT_FAILURE_CD; }
}

name_from_pkg() {
  printf "%s" "$1" | sed -E -e 's/([a-zA-Z0-9]+)[_.-].*/\1/'
}

stage_overlay() {
  check_ssh_agent

  local pkg="$1"
  shift
  local pkg_name="$(basename "$pkg")"
  local name="$(name_from_pkg "$pkg_name")"
  local img_name="${name}.${kiosk_img}"
  if [ ! -f "${pkg}" ]; then
    usage >&2
    exit $EXIT_FAILURE_PKG_NOT_FILE
  fi

  local port="$(find_open_port 2000)"
  printf "local ssh ports: %d\n" $port

  cd_or_die "$qemu_base_dir"
  rm "${img_name}" &> /dev/null
  chmod 0777 "${qemu_base_dir}"
  qemu-img create -b "${kiosk_img}" -F qcow2 -f qcow2 "${img_name}"
  qemu-system-x86_64 -nographic -display none -enable-kvm -m 2G -nic "user,hostfwd=tcp::${port}-:22" -drive "file=${img_name},format=qcow2" &
  cd_or_die "$OLDPWD"

  wait_for_ssh_or_die "$port"
  scp -P $port -o StrictHostKeyChecking=no "$pkg" localhost:/root/
  cat << EOF | ssh -p $port -o StrictHostKeyChecking=no localhost
    export DEBIAN_FRONTEND=noninteractive
    printf "${name} jail" > /etc/motd
    dpkg -i "/root/${pkg_name}"
    apt -fy install
    dpkg -i "/root/${pkg_name}"
    rm "/root/${pkg_name}"
    sed -i '$ i\\${name} &' /home/user/.xinitrc
    $@
    apt -y clean
    poweroff
EOF
  wait

  chmod 0444 "${qemu_base_dir}/${img_name}"
  printf "Finished setting up ${name} jail!\n"
}
